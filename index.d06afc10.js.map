{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        // eslint-disable-next-line no-console\n        this.score = 0;\n        this.status = \"idle\";\n        this.initialState = initialState ? initialState.map((row)=>[\n                ...row\n            ]) : Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        this.board = this.initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    moveLeft() {\n        const oldBoard = this.getState();\n        this.board.forEach((row, i)=>{\n            const newRow = row.filter((cell)=>cell !== 0);\n            for(let j = 0; j < newRow.length - 1; j++)if (newRow[j] === newRow[j + 1]) {\n                newRow[j] = newRow[j] * 2;\n                this.score += newRow[j];\n                newRow[j + 1] = 0;\n                j++;\n            }\n            this.board[i] = newRow.filter((cell)=>cell !== 0);\n            while(this.board[i].length < 4)this.board[i].push(0);\n        });\n        this.chechGameOver();\n        if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n    }\n    moveRight() {\n        const oldBoard = this.getState();\n        this.board.forEach((row, i)=>{\n            const newRow = row.filter((cell)=>cell !== 0);\n            for(let j = newRow.length - 1; j > 0; j--)if (newRow[j] === newRow[j - 1]) {\n                newRow[j] = newRow[j] * 2;\n                this.score += newRow[j];\n                newRow[j - 1] = 0;\n                j--;\n            }\n            this.board[i] = newRow.filter((cell)=>cell !== 0);\n            while(this.board[i].length < 4)this.board[i].unshift(0);\n        });\n        this.chechGameOver();\n        if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n    }\n    moveUp() {\n        const oldBoard = this.getState();\n        for(let i = 0; i < 4; i++){\n            const col = [];\n            for(let j = 0; j < 4; j++)col.push(this.board[j][i]);\n            let newCol = col.filter((cell)=>cell !== 0);\n            for(let j = 0; j < newCol.length - 1; j++)if (newCol[j] === newCol[j + 1]) {\n                newCol[j] = newCol[j] * 2;\n                this.score += newCol[j];\n                newCol[j + 1] = 0;\n                j++;\n            }\n            newCol = newCol.filter((cell)=>cell !== 0);\n            while(newCol.length < 4)newCol.push(0);\n            for(let j = 0; j < 4; j++)this.board[j][i] = newCol[j];\n        }\n        this.chechGameOver();\n        if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n    }\n    moveDown() {\n        const oldBoard = this.getState();\n        for(let i = 0; i < 4; i++){\n            const col = [];\n            for(let j = 0; j < 4; j++)col.push(this.board[j][i]);\n            let newCol = col.filter((cell)=>cell !== 0);\n            for(let j = newCol.length - 1; j > 0; j--)if (newCol[j] === newCol[j - 1]) {\n                newCol[j] = newCol[j] * 2;\n                this.score += newCol[j];\n                newCol[j - 1] = 0;\n                j--;\n            }\n            newCol = newCol.filter((cell)=>cell !== 0);\n            while(newCol.length < 4)newCol.unshift(0);\n            for(let j = 0; j < 4; j++)this.board[j][i] = newCol[j];\n        }\n        this.chechGameOver();\n        if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board.map((row)=>[\n                ...row\n            ]);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.score = 0;\n        this.board = Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        this.status = \"playing\";\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.board = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    // Add your own methods here\n    boardsAreEqual(board1, board2) {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (board1[i][j] !== board2[i][j]) return false;\n        }\n        return true;\n    }\n    addRandomTile() {\n        const mas = this.getRandomTile();\n        const numberRandom = Math.floor(Math.random() * mas.length);\n        const number = Math.random() < 0.9 ? 2 : 4;\n        this.board[mas[numberRandom].i][mas[numberRandom].j] = number;\n    }\n    getRandomTile() {\n        const masEmpty = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.board[i][j] === 0) masEmpty.push({\n                i: i,\n                j: j\n            });\n        }\n        return masEmpty;\n    }\n    chechGameOver() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.board[i][j] === 2048) {\n                this.status = \"win\";\n                return;\n            }\n            if (this.board[i][j] === 0) return;\n            if (i < 3 && this.board[i][j] === this.board[i + 1][j]) return;\n            if (j < 3 && this.board[i][j] === this.board[i][j + 1]) return;\n        }\n        this.status = \"lose\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$tilesContainer = document.querySelector(\".tiles-container\");\nlet $09e991522ca7e64e$var$tilesMap = {};\nfunction $09e991522ca7e64e$var$showMessage(message) {\n    switch(message){\n        case \"lose\":\n            $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n            break;\n        case `win`:\n            $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n            break;\n        default:\n    }\n}\nfunction $09e991522ca7e64e$var$updateScore(score) {\n    $09e991522ca7e64e$var$gameScore.textContent = score;\n}\nfunction $09e991522ca7e64e$var$updateBoard(board) {\n    const newTilesMap = {};\n    board.forEach((row, y)=>{\n        row.forEach((value, x)=>{\n            const key = `${x}-${y}`;\n            if (value === 0) {\n                if ($09e991522ca7e64e$var$tilesMap[key]) $09e991522ca7e64e$var$tilesContainer.removeChild($09e991522ca7e64e$var$tilesMap[key]);\n                return;\n            }\n            if ($09e991522ca7e64e$var$tilesMap[key]) {\n                $09e991522ca7e64e$var$tilesMap[key].style.transition = \"transform 1.15s ease-in-out\";\n                $09e991522ca7e64e$var$tilesMap[key].textContent = value;\n                $09e991522ca7e64e$var$tilesMap[key].className = `tile tile--${value}`;\n                $09e991522ca7e64e$var$tilesMap[key].style.transform = `translate(${x * 90}px, ${y * 90}px) scale(1)`;\n                newTilesMap[key] = $09e991522ca7e64e$var$tilesMap[key];\n            } else {\n                const tile = document.createElement(\"div\");\n                tile.classList.add(\"tile\", `tile--${value}`);\n                tile.textContent = value;\n                tile.style.transform = `translate(${x * 90}px, ${y * 90}px) scale(0.5)`;\n                $09e991522ca7e64e$var$tilesContainer.appendChild(tile);\n                requestAnimationFrame(()=>{\n                    tile.style.transition = \"transform 0.25s ease-in-out\";\n                    tile.style.transform = `translate(${x * 90}px, ${y * 90}px) scale(1)`;\n                });\n                newTilesMap[key] = tile;\n            }\n        });\n    });\n    $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$game.getScore());\n    $09e991522ca7e64e$var$tilesMap = newTilesMap;\n}\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", (e)=>{\n    if (!$09e991522ca7e64e$var$game || $09e991522ca7e64e$var$game.getStatus() !== \"playing\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n        $09e991522ca7e64e$var$buttonStart.className = \"button restart\";\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$buttonStart.textContent = \"Start\";\n        $09e991522ca7e64e$var$buttonStart.className = \"button start\";\n    }\n    $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$game.getScore());\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") // eslint-disable-next-line no-useless-return\n    return;\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n    }\n    $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$showMessage($09e991522ca7e64e$var$game.getStatus());\n});\n// Write your code here\nconst $09e991522ca7e64e$var$themeSwitch = document.getElementById(\"switch\");\n$09e991522ca7e64e$var$themeSwitch.addEventListener(\"change\", ()=>{\n    document.body.classList.toggle(\"dark\", $09e991522ca7e64e$var$themeSwitch.checked);\n    document.querySelectorAll(\"p\").forEach((p)=>{\n        p.style.color = $09e991522ca7e64e$var$themeSwitch.checked ? \"#fff\" : \"#333\";\n    });\n    document.querySelector(\".dark-check--p\").textContent = $09e991522ca7e64e$var$themeSwitch.checked ? \"DARK\" : \"LIGHT\";\n});\nlet $09e991522ca7e64e$var$startX = 0;\nlet $09e991522ca7e64e$var$startY = 0;\nconst $09e991522ca7e64e$var$gameContainer = document.querySelector(\".game-container\");\n$09e991522ca7e64e$var$gameContainer.addEventListener(\"touchstart\", (e)=>{\n    e.preventDefault();\n    const touch = e.touches[0];\n    $09e991522ca7e64e$var$startX = touch.clientX;\n    $09e991522ca7e64e$var$startY = touch.clientY;\n}, {\n    passive: false\n});\n$09e991522ca7e64e$var$gameContainer.addEventListener(\"touchend\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    const touch = e.changedTouches[0];\n    const diffX = touch.clientX - $09e991522ca7e64e$var$startX;\n    const diffY = touch.clientY - $09e991522ca7e64e$var$startY;\n    if (Math.abs(diffX) > Math.abs(diffY)) {\n        if (diffX > 0) $09e991522ca7e64e$var$game.moveRight();\n        else $09e991522ca7e64e$var$game.moveLeft();\n    } else if (Math.abs(diffY) > 0) {\n        if (diffY > 0) $09e991522ca7e64e$var$game.moveDown();\n        else $09e991522ca7e64e$var$game.moveUp();\n    }\n    $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$showMessage($09e991522ca7e64e$var$game.getStatus());\n}, {\n    passive: false\n});\n\n\n//# sourceMappingURL=index.d06afc10.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\n\nconst gameScore = document.querySelector('.game-score');\nconst buttonStart = document.querySelector('.button');\n\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nconst tilesContainer = document.querySelector('.tiles-container');\nlet tilesMap = {};\n\nfunction showMessage(message) {\n  switch (message) {\n    case 'lose':\n      messageLose.classList.remove('hidden');\n      break;\n    case `win`:\n      messageWin.classList.remove('hidden');\n      break;\n    default:\n  }\n}\n\nfunction updateScore(score) {\n  gameScore.textContent = score;\n}\n\nfunction updateBoard(board) {\n  const newTilesMap = {};\n\n  board.forEach((row, y) => {\n    row.forEach((value, x) => {\n      const key = `${x}-${y}`;\n\n      if (value === 0) {\n        if (tilesMap[key]) {\n          tilesContainer.removeChild(tilesMap[key]);\n        }\n\n        return;\n      }\n\n      if (tilesMap[key]) {\n        tilesMap[key].style.transition = 'transform 1.15s ease-in-out';\n        tilesMap[key].textContent = value;\n        tilesMap[key].className = `tile tile--${value}`;\n\n        tilesMap[key].style.transform =\n          `translate(${x * 90}px, ${y * 90}px) scale(1)`;\n        newTilesMap[key] = tilesMap[key];\n      } else {\n        const tile = document.createElement('div');\n\n        tile.classList.add('tile', `tile--${value}`);\n        tile.textContent = value;\n        tile.style.transform = `translate(${x * 90}px, ${y * 90}px) scale(0.5)`;\n        tilesContainer.appendChild(tile);\n\n        requestAnimationFrame(() => {\n          tile.style.transition = 'transform 0.25s ease-in-out';\n          tile.style.transform = `translate(${x * 90}px, ${y * 90}px) scale(1)`;\n        });\n\n        newTilesMap[key] = tile;\n      }\n    });\n  });\n  updateScore(game.getScore());\n  tilesMap = newTilesMap;\n}\n\nbuttonStart.addEventListener('click', (e) => {\n  if (!game || game.getStatus() !== 'playing') {\n    game.start();\n    buttonStart.textContent = 'Restart';\n    buttonStart.className = 'button restart';\n  } else {\n    game.restart();\n    buttonStart.textContent = 'Start';\n    buttonStart.className = 'button start';\n  }\n  updateBoard(game.getState());\n  updateScore(game.getScore());\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    // eslint-disable-next-line no-useless-return\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    default:\n  }\n\n  updateBoard(game.getState());\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  showMessage(game.getStatus());\n});\n// Write your code here\n\nconst themeSwitch = document.getElementById('switch');\n\nthemeSwitch.addEventListener('change', () => {\n  document.body.classList.toggle('dark', themeSwitch.checked);\n\n  document.querySelectorAll('p').forEach((p) => {\n    p.style.color = themeSwitch.checked ? '#fff' : '#333';\n  });\n\n  document.querySelector('.dark-check--p').textContent = themeSwitch.checked\n    ? 'DARK'\n    : 'LIGHT';\n});\n\nlet startX = 0;\nlet startY = 0;\n\nconst gameContainer = document.querySelector('.game-container');\n\ngameContainer.addEventListener(\n  'touchstart',\n  (e) => {\n    e.preventDefault();\n\n    const touch = e.touches[0];\n\n    startX = touch.clientX;\n    startY = touch.clientY;\n  },\n  { passive: false },\n);\n\ngameContainer.addEventListener(\n  'touchend',\n  (e) => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    const touch = e.changedTouches[0];\n    const diffX = touch.clientX - startX;\n    const diffY = touch.clientY - startY;\n\n    if (Math.abs(diffX) > Math.abs(diffY)) {\n      if (diffX > 0) {\n        game.moveRight();\n      } else {\n        game.moveLeft();\n      }\n    } else if (Math.abs(diffY) > 0) {\n      if (diffY > 0) {\n        game.moveDown();\n      } else {\n        game.moveUp();\n      }\n    }\n\n    updateBoard(game.getState());\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    showMessage(game.getStatus());\n  },\n  { passive: false },\n);\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    this.score = 0;\n    this.status = 'idle';\n\n    this.initialState = initialState\n      ? initialState.map((row) => [...row])\n      : Array.from({ length: 4 }, () => Array(4).fill(0));\n    this.board = this.initialState.map((row) => [...row]);\n  }\n\n  moveLeft() {\n    const oldBoard = this.getState();\n\n    this.board.forEach((row, i) => {\n      const newRow = row.filter((cell) => cell !== 0);\n\n      for (let j = 0; j < newRow.length - 1; j++) {\n        if (newRow[j] === newRow[j + 1]) {\n          newRow[j] = newRow[j] * 2;\n          this.score += newRow[j];\n          newRow[j + 1] = 0;\n          j++;\n        }\n      }\n\n      this.board[i] = newRow.filter((cell) => cell !== 0);\n\n      while (this.board[i].length < 4) {\n        this.board[i].push(0);\n      }\n    });\n    this.chechGameOver();\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n  }\n\n  moveRight() {\n    const oldBoard = this.getState();\n\n    this.board.forEach((row, i) => {\n      const newRow = row.filter((cell) => cell !== 0);\n\n      for (let j = newRow.length - 1; j > 0; j--) {\n        if (newRow[j] === newRow[j - 1]) {\n          newRow[j] = newRow[j] * 2;\n          this.score += newRow[j];\n          newRow[j - 1] = 0;\n          j--;\n        }\n      }\n      this.board[i] = newRow.filter((cell) => cell !== 0);\n\n      while (this.board[i].length < 4) {\n        this.board[i].unshift(0);\n      }\n    });\n    this.chechGameOver();\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n  }\n\n  moveUp() {\n    const oldBoard = this.getState();\n\n    for (let i = 0; i < 4; i++) {\n      const col = [];\n\n      for (let j = 0; j < 4; j++) {\n        col.push(this.board[j][i]);\n      }\n\n      let newCol = col.filter((cell) => cell !== 0);\n\n      for (let j = 0; j < newCol.length - 1; j++) {\n        if (newCol[j] === newCol[j + 1]) {\n          newCol[j] = newCol[j] * 2;\n          this.score += newCol[j];\n          newCol[j + 1] = 0;\n          j++;\n        }\n      }\n\n      newCol = newCol.filter((cell) => cell !== 0);\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      for (let j = 0; j < 4; j++) {\n        this.board[j][i] = newCol[j];\n      }\n    }\n    this.chechGameOver();\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n  }\n\n  moveDown() {\n    const oldBoard = this.getState();\n\n    for (let i = 0; i < 4; i++) {\n      const col = [];\n\n      for (let j = 0; j < 4; j++) {\n        col.push(this.board[j][i]);\n      }\n\n      let newCol = col.filter((cell) => cell !== 0);\n\n      for (let j = newCol.length - 1; j > 0; j--) {\n        if (newCol[j] === newCol[j - 1]) {\n          newCol[j] = newCol[j] * 2;\n          this.score += newCol[j];\n          newCol[j - 1] = 0;\n          j--;\n        }\n      }\n\n      newCol = newCol.filter((cell) => cell !== 0);\n\n      while (newCol.length < 4) {\n        newCol.unshift(0);\n      }\n\n      for (let j = 0; j < 4; j++) {\n        this.board[j][i] = newCol[j];\n      }\n    }\n    this.chechGameOver();\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.score = 0;\n    this.board = Array.from({ length: 4 }, () => Array(4).fill(0));\n    this.status = 'playing';\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // Add your own methods here\n  boardsAreEqual(board1, board2) {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (board1[i][j] !== board2[i][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  addRandomTile() {\n    const mas = this.getRandomTile();\n    const numberRandom = Math.floor(Math.random() * mas.length);\n    const number = Math.random() < 0.9 ? 2 : 4;\n\n    this.board[mas[numberRandom].i][mas[numberRandom].j] = number;\n  }\n\n  getRandomTile() {\n    const masEmpty = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          masEmpty.push({ i, j });\n        }\n      }\n    }\n\n    return masEmpty;\n  }\n\n  chechGameOver() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 2048) {\n          this.status = 'win';\n\n          return;\n        }\n\n        if (this.board[i][j] === 0) {\n          return;\n        }\n\n        if (i < 3 && this.board[i][j] === this.board[i + 1][j]) {\n          return;\n        }\n\n        if (j < 3 && this.board[i][j] === this.board[i][j + 1]) {\n          return;\n        }\n      }\n    }\n    this.status = 'lose';\n  }\n}\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","score","status","map","row","Array","from","length","fill","board","moveLeft","oldBoard","getState","forEach","i","newRow","filter","cell","j","push","chechGameOver","boardsAreEqual","addRandomTile","moveRight","unshift","moveUp","col","newCol","moveDown","getScore","getStatus","start","restart","board1","board2","mas","getRandomTile","numberRandom","Math","floor","random","number","masEmpty","$09e991522ca7e64e$var$gameScore","document","querySelector","$09e991522ca7e64e$var$buttonStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$tilesContainer","$09e991522ca7e64e$var$tilesMap","$09e991522ca7e64e$var$showMessage","message","classList","remove","$09e991522ca7e64e$var$updateScore","textContent","$09e991522ca7e64e$var$updateBoard","newTilesMap","y","value","x","key","removeChild","style","transition","className","transform","tile","createElement","add","appendChild","requestAnimationFrame","addEventListener","e","$09e991522ca7e64e$var$themeSwitch","getElementById","body","toggle","checked","querySelectorAll","p","color","$09e991522ca7e64e$var$startX","$09e991522ca7e64e$var$startY","$09e991522ca7e64e$var$gameContainer","preventDefault","touch","touches","clientX","clientY","passive","changedTouches","diffX","diffY","abs"],"version":3,"file":"index.d06afc10.js.map"}